#!/usr/bin/env python3
"""
Analyse approfondie de l'efficacit√© des op√©rateurs LinkedIn
"""
import json
from datetime import datetime

def analyze_operators_impact():
    """Analyse rigoureuse de l'impact des op√©rateurs LinkedIn"""
    
    print("üî¨ ANALYSE RIGOUREUSE - IMPACT DES OP√âRATEURS LINKEDIN")
    print("=" * 90)
    
    # R√©sultats de nos 3 tests comparatifs
    test_results = {
        'simple_seo': {
            'query': 'SEO',
            'total_jobs': 20,
            'highly_relevant': 6,
            'moderately_relevant': 4, 
            'poorly_relevant': 7,
            'completely_irrelevant': 3,
            'effectiveness': 54.5,
            'seo_in_title': 3,
            'casino_manager_present': True
        },
        'compound_keywords': {
            'query': 'SEO Search Engine Optimization',
            'total_jobs': 20,
            'highly_relevant': 1,
            'moderately_relevant': 2,
            'poorly_relevant': 10,
            'completely_irrelevant': 7,
            'effectiveness': 18.0,
            'seo_in_title': 1,
            'casino_manager_present': True
        },
        'linkedin_operators': {
            'exact_phrase': {
                'query': '"SEO Specialist"',
                'total_jobs': 1,
                'seo_direct': 1,
                'effectiveness': 100.0,  # 1/1 pertinent
                'casino_manager_present': False
            },
            'exclusion_operators': {
                'query': 'SEO NOT (casino OR gaming)',
                'total_jobs': 0,
                'effectiveness': 0.0,
                'casino_manager_present': False
            },
            'complex_boolean': {
                'query': '(SEO OR r√©f√©renceur) AND (senior OR manager OR lead)',
                'total_jobs': 0,
                'effectiveness': 0.0
            }
        }
    }
    
    print("üìä R√âSULTATS COMPARATIFS D√âTAILL√âS")
    print("-" * 90)
    
    # Test 1: Simple SEO
    print(f"\nüîç TEST 1: Recherche simple 'SEO'")
    print(f"   üìä R√©sultats: {test_results['simple_seo']['total_jobs']} emplois")
    print(f"   ‚úÖ Hautement pertinents: {test_results['simple_seo']['highly_relevant']}/20 (30%)")
    print(f"   üéØ SEO dans titre: {test_results['simple_seo']['seo_in_title']}/20 (15%)")
    print(f"   ‚ùå Compl√®tement hors sujet: {test_results['simple_seo']['completely_irrelevant']}/20 (15%)")
    print(f"   üé∞ Casino Manager pr√©sent: {'Oui' if test_results['simple_seo']['casino_manager_present'] else 'Non'}")
    print(f"   üìà Efficacit√© globale: {test_results['simple_seo']['effectiveness']}%")
    
    # Test 2: Mots-cl√©s compos√©s
    print(f"\nüîç TEST 2: Recherche compos√©e 'SEO Search Engine Optimization'")
    print(f"   üìä R√©sultats: {test_results['compound_keywords']['total_jobs']} emplois")
    print(f"   ‚úÖ Hautement pertinents: {test_results['compound_keywords']['highly_relevant']}/20 (5%)")
    print(f"   üéØ SEO dans titre: {test_results['compound_keywords']['seo_in_title']}/20 (5%)")
    print(f"   ‚ùå Compl√®tement hors sujet: {test_results['compound_keywords']['completely_irrelevant']}/20 (35%)")
    print(f"   üé∞ Casino Manager pr√©sent: {'Oui' if test_results['compound_keywords']['casino_manager_present'] else 'Non'}")
    print(f"   üìà Efficacit√© globale: {test_results['compound_keywords']['effectiveness']}%")
    
    # Test 3: Op√©rateurs LinkedIn
    print(f"\nüîç TEST 3: Op√©rateurs LinkedIn officiels")
    
    operators_data = test_results['linkedin_operators']
    
    print(f"   3a. Phrase exacte '\"SEO Specialist\"':")
    print(f"       üìä R√©sultats: {operators_data['exact_phrase']['total_jobs']} emploi")
    print(f"       ‚úÖ Pertinence: {operators_data['exact_phrase']['effectiveness']}%")
    print(f"       üé∞ Casino Manager: {'Absent' if not operators_data['exact_phrase']['casino_manager_present'] else 'Pr√©sent'}")
    
    print(f"   3b. Exclusion 'SEO NOT (casino OR gaming)':")
    print(f"       üìä R√©sultats: {operators_data['exclusion_operators']['total_jobs']} emplois")
    print(f"       ‚úÖ Pertinence: {operators_data['exclusion_operators']['effectiveness']}%")
    print(f"       üö´ Effet: √âlimination TOTALE des r√©sultats")
    
    print(f"   3c. Boolean complexe '(SEO OR r√©f√©renceur) AND (senior OR manager)':")
    print(f"       üìä R√©sultats: {operators_data['complex_boolean']['total_jobs']} emplois")
    print(f"       ‚úÖ Pertinence: {operators_data['complex_boolean']['effectiveness']}%")
    print(f"       üö´ Effet: Aucun r√©sultat trouv√©")
    
    # Analyse des patterns d√©couverts
    print(f"\n{'=' * 90}")
    print("üß† D√âCOUVERTES CRITIQUES SUR L'ALGORITHME LINKEDIN")
    print(f"{'=' * 90}")
    
    print(f"\nüö® PATTERN 1: Sur-sp√©cification = √âlimination totale")
    print(f"   ‚Ä¢ Op√©rateurs d'exclusion (NOT) ‚Üí 0 r√©sultats")
    print(f"   ‚Ä¢ Boolean complexes (AND/OR) ‚Üí 0 r√©sultats")
    print(f"   ‚Ä¢ CONCLUSION: LinkedIn ne supporte pas vraiment les op√©rateurs complexes")
    
    print(f"\nüîç PATTERN 2: Phrases exactes = Ultra-restriction")
    print(f"   ‚Ä¢ '\"SEO Specialist\"' ‚Üí 1 seul r√©sultat (mais 100% pertinent)")
    print(f"   ‚Ä¢ Avantage: Pertinence parfaite, √©limine le bruit")
    print(f"   ‚Ä¢ Inconv√©nient: Volume tr√®s faible")
    
    print(f"\nüìä PATTERN 3: Mots-cl√©s simples = Meilleur compromis")
    print(f"   ‚Ä¢ 'SEO' seul ‚Üí 20 r√©sultats, 54.5% efficacit√©")
    print(f"   ‚Ä¢ √âquilibre volume/pertinence optimal")
    print(f"   ‚Ä¢ Mais inclusion de bruit (Casino Manager)")
    
    print(f"\n‚ö†Ô∏è PATTERN 4: Algorithme LinkedIn impr√©visible")
    print(f"   ‚Ä¢ Documentation officielle vs r√©alit√© = D√©calage majeur")
    print(f"   ‚Ä¢ Op√©rateurs 'support√©s' mais non fonctionnels")
    print(f"   ‚Ä¢ Comportement diff√©rent entre interface web et API")
    
    # Calcul de l'impact r√©el des op√©rateurs
    print(f"\n{'=' * 90}")
    print("üìà IMPACT QUANTIFI√â DES OP√âRATEURS LINKEDIN")
    print(f"{'=' * 90}")
    
    # Efficacit√© relative
    simple_effectiveness = test_results['simple_seo']['effectiveness']
    exact_phrase_jobs = operators_data['exact_phrase']['total_jobs']
    
    if exact_phrase_jobs > 0:
        volume_reduction = (1 - exact_phrase_jobs / test_results['simple_seo']['total_jobs']) * 100
        quality_improvement = operators_data['exact_phrase']['effectiveness'] - simple_effectiveness
        
        print(f"üìä PHRASES EXACTES vs RECHERCHE SIMPLE:")
        print(f"   üìâ R√©duction de volume: -{volume_reduction:.1f}% ({test_results['simple_seo']['total_jobs']} ‚Üí {exact_phrase_jobs})")
        print(f"   üìà Am√©lioration qualit√©: +{quality_improvement:.1f}% ({simple_effectiveness:.1f}% ‚Üí {operators_data['exact_phrase']['effectiveness']:.1f}%)")
        print(f"   ‚úÖ Trade-off: -95% volume pour +45.5% qualit√©")
    
    # Exclusions - impact n√©gatif
    exclusion_jobs = operators_data['exclusion_operators']['total_jobs']
    print(f"\nüìä OP√âRATEURS D'EXCLUSION:")
    print(f"   üìâ Impact volume: {test_results['simple_seo']['total_jobs']} ‚Üí {exclusion_jobs} (-100%)")
    print(f"   ‚ùå VERDICT: Inutilisables (√©limination totale)")
    
    # Recommandations strat√©giques
    print(f"\n{'=' * 90}")
    print("üí° RECOMMANDATIONS STRAT√âGIQUES FINALES")
    print(f"{'=' * 90}")
    
    print(f"\nüéØ STRAT√âGIE OPTIMALE IDENTIFI√âE:")
    print(f"   1. RECHERCHE DE VOLUME: Utiliser 'SEO' simple")
    print(f"      ‚Ä¢ Volume: 20 r√©sultats")
    print(f"      ‚Ä¢ Pertinents: 10-12 emplois utilisables")
    print(f"      ‚Ä¢ Efficacit√©: 54.5%")
    
    print(f"\n   2. FILTRAGE POST-RECHERCHE OBLIGATOIRE:")
    print(f"      ‚Ä¢ √âliminer manuellement: 'Casino Manager', 'Spontaneous Application'")
    print(f"      ‚Ä¢ Scorer par pertinence: titre > description > m√©tadonn√©es")
    print(f"      ‚Ä¢ R√©ordonner par score de pertinence")
    
    print(f"\n   3. RECHERCHE DE PR√âCISION: Utiliser phrases exactes en compl√©ment")
    print(f"      ‚Ä¢ '\"SEO Specialist\"' ‚Üí 1 r√©sultat parfait")
    print(f"      ‚Ä¢ '\"R√©f√©renceur SEO\"' ‚Üí Test recommand√©")
    print(f"      ‚Ä¢ Combiner plusieurs phrases exactes")
    
    print(f"\n‚ùå STRAT√âGIES √Ä √âVITER:")
    print(f"   ‚Ä¢ Op√©rateurs d'exclusion (NOT) ‚Üí 0 r√©sultats")
    print(f"   ‚Ä¢ Boolean complexes (AND/OR multiples) ‚Üí 0 r√©sultats") 
    print(f"   ‚Ä¢ Mots-cl√©s compos√©s longs ‚Üí D√©gradation qualit√©")
    
    # Architecture de recherche recommand√©e
    print(f"\nüèóÔ∏è ARCHITECTURE DE RECHERCHE RECOMMAND√âE:")
    print(f"""
    def optimized_linkedin_search():
        results = []
        
        # Phase 1: Volume avec mot-cl√© simple
        volume_jobs = search_jobs(keywords='SEO', limit=20)
        filtered_volume = post_filter(volume_jobs)  # √âliminer Casino Manager etc
        results.extend(filtered_volume)
        
        # Phase 2: Pr√©cision avec phrases exactes
        exact_queries = ['"SEO Specialist"', '"R√©f√©renceur SEO"', '"SEO Manager"']
        for query in exact_queries:
            exact_jobs = search_jobs(keywords=query, limit=10)
            results.extend(exact_jobs)
        
        # Phase 3: D√©duplication et scoring
        unique_jobs = deduplicate(results)
        scored_jobs = calculate_relevance_score(unique_jobs)
        
        return sort_by_score(scored_jobs)
    """)
    
    # M√©triques de suivi
    print(f"\nüìä M√âTRIQUES DE SUIVI RECOMMAND√âES:")
    metrics = {
        'baseline_simple_seo': 54.5,
        'target_with_filtering': 75.0,
        'target_with_exact_phrases': 85.0,
        'acceptable_minimum': 60.0
    }
    
    for metric, value in metrics.items():
        print(f"   ‚Ä¢ {metric.replace('_', ' ').title()}: {value}%")
    
    # Sauvegarde de l'analyse
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"data/exports/operators_analysis_final_{timestamp}.json"
    
    analysis_data = {
        'analysis_timestamp': datetime.now().isoformat(),
        'test_results': test_results,
        'key_findings': {
            'best_simple_approach': 'SEO (54.5% efficacit√©)',
            'best_precise_approach': '"SEO Specialist" (100% efficacit√©, 1 r√©sultat)',
            'operators_effectiveness': 'Tr√®s limit√©e, documentation trompeuse',
            'recommended_strategy': 'Recherche simple + filtrage post-recherche'
        },
        'metrics': metrics
    }
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(analysis_data, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ Analyse compl√®te sauvegard√©e: {filename}")
    
    return analysis_data

if __name__ == "__main__":
    analysis = analyze_operators_impact()